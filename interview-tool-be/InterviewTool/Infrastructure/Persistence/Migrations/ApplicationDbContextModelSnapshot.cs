// <auto-generated />
using System;
using InterviewTool.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InterviewTool.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InterviewTool.Domain.Entities.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chapter_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.HasKey("ChapterId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("InterviewTool.Domain.Entities.ChapterResult", b =>
                {
                    b.Property<int>("ChapterResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chapter_result_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int")
                        .HasColumnName("chapter_id");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int")
                        .HasColumnName("interview_id");

                    b.Property<double>("Point")
                        .HasColumnType("float")
                        .HasColumnName("point");

                    b.HasKey("ChapterResultId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("InterviewId");

                    b.ToTable("ChapterResults");
                });

            modelBuilder.Entity("InterviewTool.Domain.Entities.Interview", b =>
                {
                    b.Property<int>("InterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("interview_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CandidateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("candidate_name");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit")
                        .HasColumnName("is_finished");

                    b.HasKey("InterviewId");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("InterviewTool.Domain.Entities.Technology", b =>
                {
                    b.Property<int>("TechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("technology_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("TechnologyId");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("InterviewTool.Domain.Entities.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("topic_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChapterId")
                        .HasColumnType("int")
                        .HasColumnName("chapter_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("TechnologyId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.HasKey("TopicId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("InterviewTool.Domain.Entities.TopicResult", b =>
                {
                    b.Property<int>("TopicResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("topic_result_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChapterResultId")
                        .HasColumnType("int")
                        .HasColumnName("chapter_result_id");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasColumnName("point");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int")
                        .HasColumnName("topic_id");

                    b.HasKey("TopicResultId");

                    b.HasIndex("ChapterResultId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicResults");
                });

            modelBuilder.Entity("InterviewTool.Domain.Entities.ChapterResult", b =>
                {
                    b.HasOne("InterviewTool.Domain.Entities.Chapter", "Chapter")
                        .WithMany("ChapterResults")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("InterviewTool.Domain.Entities.Interview", "Interview")
                        .WithMany("ChapterResults")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("InterviewTool.Domain.Entities.Topic", b =>
                {
                    b.HasOne("InterviewTool.Domain.Entities.Chapter", "Chapter")
                        .WithMany("Topics")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterviewTool.Domain.Entities.Technology", "Technology")
                        .WithMany("Topics")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Chapter");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("InterviewTool.Domain.Entities.TopicResult", b =>
                {
                    b.HasOne("InterviewTool.Domain.Entities.ChapterResult", "ChapterResult")
                        .WithMany("TopicResults")
                        .HasForeignKey("ChapterResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterviewTool.Domain.Entities.Topic", "Topic")
                        .WithMany("TopicResults")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ChapterResult");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("InterviewTool.Domain.Entities.Chapter", b =>
                {
                    b.Navigation("ChapterResults");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("InterviewTool.Domain.Entities.ChapterResult", b =>
                {
                    b.Navigation("TopicResults");
                });

            modelBuilder.Entity("InterviewTool.Domain.Entities.Interview", b =>
                {
                    b.Navigation("ChapterResults");
                });

            modelBuilder.Entity("InterviewTool.Domain.Entities.Technology", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("InterviewTool.Domain.Entities.Topic", b =>
                {
                    b.Navigation("TopicResults");
                });
#pragma warning restore 612, 618
        }
    }
}
